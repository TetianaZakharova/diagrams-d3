{"version":3,"file":"static/js/146.34c83e3f.chunk.js","mappings":"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","sources":["diagrams/treeChart/TreeDiagram.js"],"sourcesContent":["import { useEffect, useRef } from 'react';\nimport { tree, hierarchy, select } from \"d3\"\n\nconst TreeDiagram = ({sourceData}) => {\n\n    let treeRef = useRef();\n    const treeData = sourceData;\n\n    // Set the dimensions and margins of the diagram\n    const margin = {top: 0, right: 90, bottom: 30, left: 170},\n    //   width = 1400 - margin.left - margin.right,\n    //   height = 800 - margin.top - margin.bottom;  \n    width = 1270 - margin.left - margin.right,\n    height = 565 - margin.top - margin.bottom;  \n\n    useEffect(() => {\n         //remove all nodes before updates\n        select(\"#treeDiagram\").selectAll(\"svg\").remove()\n        // treeRef.current.style.height = height + \"px\";\n        // treeRef.current.style.width  = width + \"px\";\n\n         // append the svg object to the body of the page\n         // appends a 'group' element to 'svg'\n         // moves the 'group' element to the top left margin\n        const svg = select(\"#treeDiagram\").append(\"svg\")\n          .attr(\"width\", width + margin.right + margin.left)\n          .attr(\"height\", height + margin.top + margin.bottom)\n          .call(responsivefy)\n          .append(\"g\")\n          .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");  \n  \n        const i = 0,\n          duration = 750;\n\n        // declares a tree layout and assigns the size\n        let treemap = tree().size([height, width]);\n\n    // Assigns parent, children, height, depth    \n        const root = hierarchy(treeData);\n          root.x0 = height / 2;\n          root.y0 = 0;\n          root.descendants().forEach((d, i) => {\n              d.id = i;\n              d._children = d.children;\n            });\n\n        function responsivefy(svg) {\n        // get container + svg aspect ratio\n          let container = select(svg.node().parentNode),\n            width = parseInt(svg.style(\"width\")),\n            height = parseInt(svg.style(\"height\")),\n            aspect = width / height;       \n\n        // add viewBox and preserveAspectRatio properties,\n        // and call resize so that svg resizes on inital page load\n        //   svg.attr(\"viewBox\", \"0 0 \" + 1200 + \" \" + height)\n        svg.attr(\"viewBox\", \"0 0 \" + width + \" \" + height)\n              .attr(\"perserveAspectRatio\", \"xMinYMid\")\n              .call(resize);     \n          select(window).on(\"resize.\" + container.attr(\"id\"), resize);\n\n        // get width of container and resize svg to fit it\n        function resize() {\n            var targetWidth = parseInt(container.style(\"width\"));\n            svg.attr(\"width\", targetWidth);\n            svg.attr(\"height\", Math.round(targetWidth / aspect));\n        }\n    }\n    // Collapse the node and all it's children\n    function collapse(d) {\n        if(d.children) {\n            d._children = d.children\n            d._children.forEach(collapse)\n            d.children = null\n        }\n    };\n   \n    function update(source) {\n\n        // Assigns the x and y position for the nodes\n        const treeData = treemap(root);\n        console.log(treeData)\n\n        // Compute the new tree layout.\n        const nodes = treeData.descendants(),\n              links = treeData.descendants().slice(1);\n\n        // Normalize for fixed-depth.\n        nodes.forEach(function(d){ d.y = d.depth * 180});\n\n        // ****************** Nodes section ***************************\n\n        // Update the nodes...\n        const node = svg.selectAll('g.node')\n            .data(nodes, function(d, i) {return d.id || (d.id = i++) });\n \n        // Enter any new modes at the parent's previous position.\n        const nodeEnter = node.enter().append('g')\n            .attr('class', 'node')\n            .attr(\"transform\", function(d) {\n                return \"translate(\" + source.y0 + \",\" + source.x0 + \")\";\n            })\n            .attr('cursor', 'pointer')\n            // .on('click', click);\n            .on(\"click\", (event, d) => {\n                d.children = d.children ? null : d._children;\n                update(d);\n              });                    \n    \n        // Add Circle for the nodes\n        nodeEnter.append('circle')\n            .attr('class', 'node')\n            .attr('r', 1e-6)\n            .style(\"fill\", function(d) {\n                if(d.data.color !== undefined){\n                    return d.data.color;\n                }else{\n                    return d._children ? \"lightsteelblue\" : \"#fff\";\n                }\n\n            })\n            .style(\"stroke\", function(d) {\n                if(d.data.color !== undefined){\n                    return d.data.color;\n                }else{\n                    return \"steelblue\";\n                }\n            });\n\n        // Add labels for the nodes\n        nodeEnter.append('text')\n            .attr(\"dy\", \".35em\")\n            .attr(\"x\", function(d) {\n                return d.children || d._children ? -13 : 13;\n            })\n            .attr(\"x\", d => d._children ? -13 : 13)\n            .attr(\"text-anchor\", function(d) {\n                return d.children || d._children ? \"end\" : \"start\";\n            })\n            .text(function(d) { return d.data.name; });\n            // .clone(true).lower()\n            // .attr(\"stroke-linejoin\", \"round\")\n            // .attr(\"stroke-width\", 1)\n            // .attr(\"stroke\", \"white\");\n\n        // UPDATE\n        var nodeUpdate = nodeEnter.merge(node);\n\n        // Transition to the proper position for the node\n        nodeUpdate.transition()\n            .duration(duration)\n            .attr(\"transform\", function(d) {\n                return \"translate(\" + d.y + \",\" + d.x + \")\";\n            });\n            // .attr(\"fill-opacity\", 1)\n            // .attr(\"stroke-opacity\", 1);\n\n        // Update the node attributes and style\n        nodeUpdate.select('circle.node')\n            .attr('r', 10)\n            .style(\"fill\", function(d) {\n                if(d.data.color !== undefined){\n                    return d.data.color;\n                }else{\n                    return d._children ? \"lightsteelblue\" : \"#fff\";\n                }\n            })\n            .style(\"stroke\", function(d) {\n                if(d.data.color !== undefined){\n                    return d.data.color;\n                }else{\n                    return \"steelblue\";\n                }\n            })\n            .attr('cursor', 'pointer');\n\n        // Remove any exiting nodes\n        var nodeExit = node.exit().transition()\n            .duration(duration)\n            .attr(\"transform\", function(d) {\n                return \"translate(\" + source.y + \",\" + source.x + \")\";\n            })\n            .remove();\n\n        // On exit reduce the node circles size to 0\n        nodeExit.select('circle')\n            .attr('r', 1e-6);\n\n        // On exit reduce the opacity of text labels\n        nodeExit.select('text')\n            .style('fill-opacity', 1e-6);\n\n        // ****************** links section ***************************\n\n        // Update the links...\n        var link = svg.selectAll('path.link')\n            .data(links, function(d) { return d.id; });\n\n        // Enter any new links at the parent's previous position.\n        var linkEnter = link.enter().insert('path', \"g\")\n            .attr(\"class\", \"link\")\n            .attr('d', function(d){\n                var o = {x: source.x0, y: source.y0}\n                return diagonal(o, o)\n            })\n            .attr(\"fill\",\"none\")\n            .attr(\"class\", \"link\")\n            .attr (\"stroke\", \"#bbbbbb\");\n\n        // UPDATE\n        var linkUpdate = linkEnter.merge(link);\n\n        // Transition back to the parent element position\n        linkUpdate.transition()\n            .duration(duration)\n            .attr('d', function(d){ return diagonal(d, d.parent) });\n\n        // Remove any exiting links\n        var linkExit = link.exit().transition()\n            .duration(duration)\n            .attr('d', function(d) {\n                var o = {x: source.x, y: source.y}\n                return diagonal(o, o)\n            })\n            .remove();\n\n        // Store the old positions for transition.\n        nodes.forEach(function(d){\n            d.x0 = d.x;\n            d.y0 = d.y;\n        });\n\n        // Creates a curved (diagonal) path from parent to the child nodes\n        function diagonal(s, d) {\n            var path = `M ${s.y} ${s.x}\n                        C ${(s.y + d.y) / 2} ${s.x},\n                        ${(s.y + d.y) / 2} ${d.x},\n                        ${d.y} ${d.x}`;\n            return path;\n        }\n  };\n  update(root);\n}, [sourceData])\n\n  return (\n    <div className='col-lg-12 d-flex flex-column' >\n  \n        <div\n          id='treeDiagram'\n          className='col-lg-12 d-flex mx-auto'\n          ref={treeRef}\n        ></div>\n    </div>\n  )\n}\n\nexport default TreeDiagram;\n"],"names":["_ref","sourceData","treeRef","useRef","treeData","margin","width","height","useEffect","select","selectAll","remove","svg","append","attr","call","container","node","parentNode","parseInt","style","aspect","resize","targetWidth","Math","round","window","on","duration","treemap","tree","size","root","hierarchy","x0","y0","descendants","forEach","d","i","id","_children","children","update","source","console","log","nodes","links","slice","y","depth","data","nodeEnter","enter","event","undefined","color","text","name","nodeUpdate","merge","transition","x","nodeExit","exit","link","diagonal","s","concat","insert","o","parent","_jsx","className","ref"],"sourceRoot":""}